let path;_bfc‍.x([["createPages",()=>createPages]]);_bfc‍.w("path",[["default",["path"],function(v){path=v}]]);// From Node


async function turnPizzasIntoPages({ graphql, actions }) {
  // 1. Get a template for this Pizza page
  const pizzaTemplate = path.resolve('./src/templates/PizzaTemplate.js');

  // 2. Query for the name and slugs of all pizzas
  // Syntax is a bit different here than other queries because we are using the Node API
  // await graphql(`...`) vs graphql`...`
  const { data } = await graphql(`
    query {
      pizzas: allSanityPizza {
        nodes {
          name
          slug {
            current
          }
        }
      }
    }
  `);

  // 3. Loop over each pizza and create a page for that pizza
  // Not using .map() b/c we are not returning anything
  data.pizzas.nodes.forEach((pizza) => {
    _bfc‍.g.console.log('creating a page for', pizza.name);
    actions.createPage({
      // Choose the URL for the new page being created
      path: `pizza/${pizza.slug.current}`,
      // The compinent should be the Template Gatsby should use to create the page
      component: pizzaTemplate,
      // This context is passed directly to the new page and can be accessed via GraphQL query variable
      // See PizzaTEmplate.js sanityPizza query for reference
      context: {
        slug: pizza.slug.current,
      },
    });
  });
}

       async function createPages(params) {
  // Create the below pages dynamically:
  // - Pizzas
  await turnPizzasIntoPages(params);

  // - Toppings
  // await turnToppingsIntoPages(params);

  // - Slicemasters
  // await turnPeopleIntoPages(params);

  // Rather than stuff them all into here, await it..
}
